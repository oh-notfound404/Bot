const axios = require("axios");

const fontMapping = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
  'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
  'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
  'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
  'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
  'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
  'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
};

function convertToBold(text) {
  return text.replace(/(?:\*\*(.*?)\*\*|## (.*?)|### (.*?))/g, (match, boldText, h2Text, h3Text) => {
    const targetText = boldText || h2Text || h3Text;
    return [...targetText].map(char => fontMapping[char] || char).join('');
  });
}

module.exports = {
  name: "meta",
  usePrefix: false,
  usage: "meta [question]",
  description: "Ask a question to Meta AI",
  version: "1.0.0",
  cooldown: 5,

  async execute({ api, event, args }) {
    const { threadID, messageID } = event;
    const prompt = args.join(" ");

    if (!prompt) {
      return api.sendMessage("‚ùå Please provide your question.\n\nUsage: meta <your question>", threadID, messageID);
    }

    try {
      api.setMessageReaction("‚è≥", messageID, () => {}, true);

      const apiUrl = `https://markdevs-last-api-s7d0.onrender.com/api/meta?q=${encodeURIComponent(prompt)}`;
      const res = await axios.get(apiUrl);
      const text = convertToBold(res.data.response);

      const metaReply = `‚àû | ùó†ùó≤ùòÅùóÆ ùóîùó∂\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${text}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      await api.sendMessage(metaReply, threadID, messageID);
      api.setMessageReaction("‚úÖ", messageID, () => {}, true);
    } catch (error) {
      console.error("Meta AI error:", error);
      api.setMessageReaction("‚ùå", messageID, () => {}, true);
      api.sendMessage("‚ùå Sorry, there was an error processing your request.", threadID, messageID);
    }
  }
};